security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        # désactive la sécurité sur profiler, assets, etc.
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # firewall pour l'API
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider

            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

            # Auth via cookie JWT OU Authorization header
            jwt: ~

            # (Optionnel : si tu veux ton custom authenticator cookie-only)
            # custom_authenticators:
            #     - App\Security\JWTCookieAuthenticator

        # firewall principal (non-API, ex: site web)
        main:
            lazy: true
            provider: app_user_provider
            # Tu peux mettre des form_login ici si tu as un front Symfony classique

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        ROLE_ADMIN: [ ROLE_USER, ROLE_MODERATOR ]
        ROLE_MODERATOR: ROLE_USER


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
